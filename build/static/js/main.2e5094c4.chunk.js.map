{"version":3,"sources":["App.js","index.js"],"names":["App","props","randomColor","colorIndex","Math","floor","random","colors","length","createBoardColor","state","width","height","board","i","horizontal","j","color","push","id","setState","detectElementAdjacency","row","col","elementsAdjacency","vertical","checkedBoard","isChecked","includes","checked","handleChange","event","target","name","value","this","className","type","min","max","onChange","onClick","map","rowIndex","colIndex","style","backgroundColor","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.2e5094c4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./styles/globals.css\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.colors = [\"#447473\", \"#E79735\", \"#5477A5\"];\n    this.state = {\n      board: [],\n      width: 6,\n      height: 5,\n    };\n  }\n\n  componentDidMount() {\n    this.createBoardColor();\n  }\n\n  randomColor = () => {\n    const colorIndex = Math.floor(Math.random() * this.colors.length);\n    return this.colors[colorIndex];\n  };\n\n  createBoardColor = () => {\n    const { width, height } = this.state;\n    const board = [];\n    for (let i = 0; i < height; i++) {\n      const horizontal = [];\n      for (let j = 0; j < width; j++) {\n        const color = this.randomColor();\n        horizontal.push({ color, id: i + \"-\" + j });\n      }\n      board.push(horizontal);\n    }\n    this.setState({ board });\n  };\n\n  detectElementAdjacency = (row, col, color) => {\n    const { board, width, height } = this.state;\n    let elementsAdjacency = {\n      vertical: [board[row][col].id],\n      horizontal: [board[row][col].id],\n    };\n    // find vertical\n    for (let i = row - 1; i >= 0; i--) {\n      if (board[i][col].color === color) {\n        elementsAdjacency.vertical.push(board[i][col].id);\n      } else {\n        break;\n      }\n    }\n    for (let i = row + 1; i < height; i++) {\n      if (board[i][col].color === color) {\n        elementsAdjacency.vertical.push(board[i][col].id);\n      } else {\n        break;\n      }\n    }\n    if (elementsAdjacency.vertical.length < 3) {\n      elementsAdjacency.vertical = [];\n    }\n    //find horizontal\n    for (let i = col - 1; i >= 0; i--) {\n      if (board[row][i].color === color) {\n        elementsAdjacency.horizontal.push(board[row][i].id);\n      } else {\n        break;\n      }\n    }\n    for (let i = col + 1; i < width; i++) {\n      if (board[row][i].color === color) {\n        elementsAdjacency.horizontal.push(board[row][i].id);\n      } else {\n        break;\n      }\n    }\n    if (elementsAdjacency.horizontal.length < 3) {\n      elementsAdjacency.horizontal = [];\n    }\n    elementsAdjacency = [\n      ...elementsAdjacency.vertical,\n      ...elementsAdjacency.horizontal,\n    ];\n\n    const checkedBoard = board;\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        const isChecked = elementsAdjacency.includes(checkedBoard[i][j].id);\n        checkedBoard[i][j].checked = isChecked;\n      }\n    }\n    this.setState({ board: checkedBoard });\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    const { board, width, height } = this.state;\n    return (\n      <>\n        <div className='title-container'>\n          <h3 className='title'>Detect element adjacency</h3>\n          <input\n            type='number'\n            name='width'\n            min={5}\n            max={20}\n            value={width}\n            onChange={this.handleChange}\n          />\n          X\n          <input\n            type='number'\n            name='height'\n            min={5}\n            max={20}\n            value={height}\n            onChange={this.handleChange}\n          />\n          <button onClick={this.createBoardColor}>Apply</button>\n        </div>\n        <div className='board'>\n          {board.map((row, rowIndex) => (\n            <div key={rowIndex} className='board-row'>\n              {row.map((col, colIndex) => (\n                <div\n                  key={colIndex + \"col\"}\n                  className={`board-col ${col.checked ? \"checked\" : \"\"}`}\n                  style={{ backgroundColor: col.color }}\n                  onClick={() =>\n                    this.detectElementAdjacency(rowIndex, colIndex, col.color)\n                  }\n                >\n                  {rowIndex}-{colIndex}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(<App />,rootElement);\n\n/*\nserviceWorker.register({\n  onUpdate: () => {\n    console.log('update');\n  },\n});\n*/\n"],"sourceRoot":""}